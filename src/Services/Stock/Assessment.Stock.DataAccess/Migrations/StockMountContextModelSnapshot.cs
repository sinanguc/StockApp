// <auto-generated />
using System;
using Assessment.Stock.DataAccess.Concrete.EntityFramework.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Assessment.Stock.DataAccess.Migrations
{
    [DbContext(typeof(StockContext))]
    partial class StockMountContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.13")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Assessment.Stock.Entities.Concrete.Invoices.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric")
                        .HasColumnName("amount");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("customer_name");

                    b.Property<string>("CustomerSurname")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("customer_surname");

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("invoice_date");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer")
                        .HasColumnName("product_id");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("ProductId");

                    b.ToTable("invoice", "public");
                });

            modelBuilder.Entity("Assessment.Stock.Entities.Concrete.Orders.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric")
                        .HasColumnName("amount");

                    b.Property<int?>("InvoiceId")
                        .HasColumnType("integer")
                        .HasColumnName("invoice_id");

                    b.Property<int>("InvoiceStatus")
                        .HasColumnType("integer")
                        .HasColumnName("invoice_status");

                    b.Property<int>("OrderProductCount")
                        .HasColumnType("integer")
                        .HasColumnName("order_product_count");

                    b.Property<string>("OrderStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("order_status");

                    b.Property<DateTime>("OrderTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("order_time");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer")
                        .HasColumnName("product_id");

                    b.Property<int>("StoreId")
                        .HasColumnType("integer")
                        .HasColumnName("store_id");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("InvoiceId");

                    b.HasIndex("ProductId");

                    b.HasIndex("StoreId", "ProductId", "InvoiceId");

                    b.ToTable("order", "public");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 30000m,
                            InvoiceStatus = 0,
                            OrderProductCount = 2,
                            OrderStatus = "Completed",
                            OrderTime = new DateTime(2022, 1, 12, 22, 18, 24, 594, DateTimeKind.Local).AddTicks(8506),
                            ProductId = 1,
                            StoreId = 37814
                        });
                });

            modelBuilder.Entity("Assessment.Stock.Entities.Concrete.Products.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean")
                        .HasColumnName("deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<int>("Stock")
                        .HasColumnType("integer")
                        .HasColumnName("stock");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("product", "public");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Deleted = false,
                            Name = "IPhone 15",
                            Price = 15000m,
                            Stock = 15
                        });
                });

            modelBuilder.Entity("Assessment.Stock.Entities.Concrete.Users.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ApiCode")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)")
                        .HasColumnName("api_code");

                    b.Property<string>("Avatar")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("avatar");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean")
                        .HasColumnName("deleted");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("PackageEndDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("package_end_date");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("password");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("surname");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex("Id", "Username")
                        .IsUnique();

                    b.ToTable("user", "public");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Avatar = "https://media.cdnandroid.com/item_images/722838/imagen-stockmount-0big.jpg",
                            Deleted = false,
                            Email = "yazilim@stockmount.com",
                            Name = "Stock",
                            Password = "11223344!",
                            Surname = "Mount",
                            Username = "yazilim@stockmount.com"
                        });
                });

            modelBuilder.Entity("Assessment.Stock.Entities.Concrete.Invoices.Invoice", b =>
                {
                    b.HasOne("Assessment.Stock.Entities.Concrete.Products.Product", "Product")
                        .WithMany("Invoice")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Assessment.Stock.Entities.Concrete.Orders.Order", b =>
                {
                    b.HasOne("Assessment.Stock.Entities.Concrete.Invoices.Invoice", "Invoice")
                        .WithMany("Order")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Assessment.Stock.Entities.Concrete.Products.Product", "Product")
                        .WithMany("Order")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Invoice");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Assessment.Stock.Entities.Concrete.Invoices.Invoice", b =>
                {
                    b.Navigation("Order");
                });

            modelBuilder.Entity("Assessment.Stock.Entities.Concrete.Products.Product", b =>
                {
                    b.Navigation("Invoice");

                    b.Navigation("Order");
                });
#pragma warning restore 612, 618
        }
    }
}
